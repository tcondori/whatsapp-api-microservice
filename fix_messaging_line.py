"""
Script para inspeccionar y corregir los datos en la tabla messaging_lines
"""
import sys
sys.path.append('.')

from entrypoint import create_app
from database.connection import db
from database.models import MessagingLine

def inspect_messaging_lines():
    """Inspecciona el contenido actual de messaging_lines"""
    app = create_app()
    
    with app.app_context():
        print("üîç INSPECCIONANDO TABLA messaging_lines:")
        print("=" * 50)
        
        lines = MessagingLine.query.all()
        print(f"üìä L√≠neas encontradas: {len(lines)}")
        
        for i, line in enumerate(lines, 1):
            print(f"\nüìã L√çNEA {i}:")
            print(f"  ‚Ä¢ ID interno: {line.id}")
            print(f"  ‚Ä¢ line_id: {line.line_id}")
            print(f"  ‚Ä¢ phone_number_id: {line.phone_number_id}")
            print(f"  ‚Ä¢ display_name: {line.display_name}")
            print(f"  ‚Ä¢ phone_number: {line.phone_number}")
            print(f"  ‚Ä¢ is_active: {line.is_active}")
            print(f"  ‚Ä¢ max_daily_messages: {line.max_daily_messages}")
            print(f"  ‚Ä¢ current_daily_count: {line.current_daily_count}")
            print(f"  ‚Ä¢ webhook_url: {line.webhook_url}")
            print(f"  ‚Ä¢ api_version: {line.api_version}")
            print(f"  ‚Ä¢ business_id: {line.business_id}")
            print(f"  ‚Ä¢ created_at: {line.created_at}")
            print(f"  ‚Ä¢ updated_at: {line.updated_at}")

def update_line_1_config():
    """Actualiza la configuraci√≥n de line_1 con los datos reales"""
    app = create_app()
    
    with app.app_context():
        print("\nüîß ACTUALIZANDO CONFIGURACI√ìN DE line_1:")
        print("=" * 50)
        
        # Buscar line_1
        line_1 = MessagingLine.query.filter_by(line_id='line_1').first()
        
        if not line_1:
            print("‚ùå No se encontr√≥ line_1, creando nueva l√≠nea...")
            
            # Leer configuraci√≥n real del .env
            import os
            from dotenv import load_dotenv
            load_dotenv()
            
            line_1 = MessagingLine(
                line_id='line_1',
                phone_number_id=os.getenv('LINE_1_PHONE_NUMBER_ID'),
                display_name=os.getenv('LINE_1_DISPLAY_NAME', 'L√≠nea Comercial'),
                phone_number=os.getenv('LINE_1_PHONE_NUMBER'),
                is_active=True,
                max_daily_messages=int(os.getenv('LINE_1_MAX_DAILY_MESSAGES', '1000')),
                api_version='v18.0',
                business_id=os.getenv('WHATSAPP_BUSINESS_ID')
            )
            
            db.session.add(line_1)
            print("‚úÖ Nueva l√≠nea line_1 creada")
        else:
            print("‚úÖ line_1 encontrada, actualizando datos...")
            
            # Leer configuraci√≥n real del .env
            import os
            from dotenv import load_dotenv
            load_dotenv()
            
            # Actualizar con datos reales
            line_1.phone_number_id = os.getenv('LINE_1_PHONE_NUMBER_ID')
            line_1.display_name = os.getenv('LINE_1_DISPLAY_NAME', 'L√≠nea Comercial')
            line_1.phone_number = os.getenv('LINE_1_PHONE_NUMBER')
            line_1.is_active = True
            line_1.max_daily_messages = int(os.getenv('LINE_1_MAX_DAILY_MESSAGES', '1000'))
            line_1.api_version = 'v18.0'
            line_1.business_id = os.getenv('WHATSAPP_BUSINESS_ID')
            
            print("‚úÖ line_1 actualizada con datos reales")
        
        # Guardar cambios
        try:
            db.session.commit()
            print("‚úÖ Cambios guardados en base de datos")
            
            # Mostrar resultado final
            print(f"\nüìä CONFIGURACI√ìN FINAL DE line_1:")
            print(f"  ‚Ä¢ phone_number_id: {line_1.phone_number_id}")
            print(f"  ‚Ä¢ display_name: {line_1.display_name}")
            print(f"  ‚Ä¢ phone_number: {line_1.phone_number}")
            print(f"  ‚Ä¢ business_id: {line_1.business_id}")
            print(f"  ‚Ä¢ is_active: {line_1.is_active}")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Error guardando cambios: {e}")

def validate_configuration():
    """Valida que la configuraci√≥n est√© correcta"""
    app = create_app()
    
    with app.app_context():
        print("\n‚úÖ VALIDANDO CONFIGURACI√ìN:")
        print("=" * 50)
        
        line_1 = MessagingLine.query.filter_by(line_id='line_1').first()
        
        if line_1:
            print(f"‚úÖ line_1 existe en base de datos")
            
            # Validaciones
            if line_1.phone_number_id and line_1.phone_number_id != 'demo-phone-id':
                print(f"‚úÖ phone_number_id v√°lido: {line_1.phone_number_id}")
            else:
                print(f"‚ùå phone_number_id inv√°lido: {line_1.phone_number_id}")
            
            if line_1.business_id:
                print(f"‚úÖ business_id v√°lido: {line_1.business_id}")
            else:
                print(f"‚ùå business_id faltante")
            
            if line_1.is_active:
                print(f"‚úÖ L√≠nea activa")
            else:
                print(f"‚ùå L√≠nea inactiva")
                
        else:
            print(f"‚ùå line_1 NO existe en base de datos")

if __name__ == "__main__":
    inspect_messaging_lines()
    update_line_1_config()
    validate_configuration()
    
    print(f"\nüéØ PR√ìXIMOS PASOS:")
    print(f"  1. La l√≠nea line_1 ahora deber√≠a tener datos reales")
    print(f"  2. Reinicia el servidor para usar la configuraci√≥n actualizada")
    print(f"  3. Los mensajes deber√≠an enviarse a trav√©s de WhatsApp API real")
    print(f"  4. Ya no necesitar√°s las variables LINE_1_* en .env para el funcionamiento b√°sico")
