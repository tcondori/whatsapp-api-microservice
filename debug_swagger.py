#!/usr/bin/env python3
"""
Script para diagnosticar errores de Swagger
Identifica problemas en la configuraci√≥n de Flask-RESTX
"""
import traceback
import sys
import os

# Agregar directorio ra√≠z al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

def test_swagger():
    """Funci√≥n para probar la configuraci√≥n de Swagger"""
    print("=" * 60)
    print("üîç DIAGN√ìSTICO DE SWAGGER")
    print("=" * 60)
    
    try:
        print("\n1Ô∏è‚É£ Importando entrypoint...")
        from entrypoint import create_app
        print("‚úÖ Importaci√≥n exitosa")
        
        print("\n2Ô∏è‚É£ Creando aplicaci√≥n...")
        app = create_app()
        print("‚úÖ Aplicaci√≥n creada exitosamente")
        
        print("\n3Ô∏è‚É£ Probando acceso a Swagger JSON...")
        with app.test_client() as client:
            response = client.get('/swagger.json')
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ Swagger JSON generado correctamente")
            else:
                print(f"‚ùå Error en Swagger JSON: {response.data.decode()}")
        
        print("\n4Ô∏è‚É£ Probando acceso a documentaci√≥n Swagger UI...")
        with app.test_client() as client:
            response = client.get('/docs/')
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ Swagger UI funcionando correctamente")
            else:
                print(f"‚ùå Error en Swagger UI: {response.data.decode()}")
        
        print("\n5Ô∏è‚É£ Verificando rutas registradas...")
        for rule in app.url_map.iter_rules():
            if '/docs' in rule.rule or '/swagger' in rule.rule:
                print(f"  üìÑ {rule.rule} -> {rule.endpoint}")
        
        print("\n" + "=" * 60)
        print("‚úÖ DIAGN√ìSTICO COMPLETADO EXITOSAMENTE")
        print("üåê Swagger disponible en: http://localhost:5000/docs/")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå ERROR ENCONTRADO: {str(e)}")
        print("\nüìã TRACEBACK COMPLETO:")
        traceback.print_exc()
        
        print(f"\nüí° SUGERENCIAS DE SOLUCI√ìN:")
        error_str = str(e).lower()
        if "dict" in error_str and "callable" in error_str:
            print("  ‚Ä¢ El error 'dict object is not callable' indica problema en modelos Flask-RESTX")
            print("  ‚Ä¢ Revisar definiciones de api.model() en routes.py")
            print("  ‚Ä¢ Verificar que no se est√©n llamando diccionarios como funciones")
        elif "import" in error_str:
            print("  ‚Ä¢ Error de importaci√≥n - verificar dependencias")
            print("  ‚Ä¢ Ejecutar: pip install flask-restx")
        elif "circular" in error_str:
            print("  ‚Ä¢ Importaci√≥n circular detectada")
            print("  ‚Ä¢ Revisar imports en models.py y routes.py")

if __name__ == '__main__':
    test_swagger()
