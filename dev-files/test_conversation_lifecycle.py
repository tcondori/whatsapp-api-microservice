#!/usr/bin/env python
"""
Prueba para verificar el manejo de ciclo de vida de conversaciones
Analiza qu√© pasa cuando un usuario deja una conversaci√≥n y los controles de cierre
"""

from app import create_app
from database.models import ConversationContext, ChatbotInteraction
from database.connection import db
from datetime import datetime, timedelta

# Importar con manejo de errores
try:
    from app.repositories.conversation_repository import ConversationRepository
    CONV_REPO_AVAILABLE = True
except ImportError:
    CONV_REPO_AVAILABLE = False
    print("‚ö†Ô∏è  ConversationRepository no disponible - usando consultas directas")

try:
    from app.services.chatbot_service_test import ChatbotService
    CHATBOT_AVAILABLE = True
except ImportError:
    CHATBOT_AVAILABLE = False
    print("‚ö†Ô∏è  ChatbotService no disponible")

def test_conversation_lifecycle():
    """Prueba el ciclo de vida completo de una conversaci√≥n"""
    
    print("="*70)
    print("üîÑ PRUEBA DE CICLO DE VIDA DE CONVERSACIONES")
    print("="*70)
    
    app = create_app()
    
    with app.app_context():
        test_phone = "595987000123"
        
        # Test 1: Estado inicial - sin conversaci√≥n
        print("\nüì± TEST 1: ESTADO INICIAL")
        print("-" * 50)
        test_initial_state(test_phone)
        
        # Test 2: Inicio de conversaci√≥n
        print("\nüó®Ô∏è  TEST 2: INICIO DE CONVERSACI√ìN")
        print("-" * 50)
        test_conversation_start(test_phone)
        
        # Test 3: Conversaci√≥n activa
        print("\nüí¨ TEST 3: CONVERSACI√ìN ACTIVA")
        print("-" * 50)
        test_active_conversation(test_phone)
        
        # Test 4: Conversaci√≥n abandonada (timeout)
        print("\n‚è∞ TEST 4: CONVERSACI√ìN ABANDONADA (TIMEOUT)")
        print("-" * 50)
        test_conversation_timeout(test_phone)
        
        # Test 5: Limpieza de conversaciones antiguas
        print("\nüßπ TEST 5: LIMPIEZA DE CONVERSACIONES ANTIGUAS")
        print("-" * 50)
        test_conversation_cleanup()
        
        # Test 6: Reinicio de conversaci√≥n
        print("\nüîÑ TEST 6: REINICIO DE CONVERSACI√ìN")
        print("-" * 50)
        test_conversation_restart(test_phone)
        
        print("\n" + "="*70)
        print("üìä RESUMEN DE AN√ÅLISIS")
        print("="*70)
        print_lifecycle_analysis()

def test_initial_state(test_phone):
    """Verifica el estado inicial sin conversaci√≥n activa"""
    try:
        # Verificar que no hay contexto existente
        context = ConversationContext.query.filter_by(phone_number=test_phone).first()
        
        if context:
            print(f"‚ö†Ô∏è  Contexto existente encontrado para {test_phone}")
            print(f"   ‚Ä¢ √öltima interacci√≥n: {context.last_interaction}")
            print(f"   ‚Ä¢ Tema actual: {context.current_topic}")
            print(f"   ‚Ä¢ Sesiones: {context.session_count}")
        else:
            print(f"‚úÖ No hay contexto previo para {test_phone}")
        
        # Verificar interacciones hist√≥ricas
        interactions = ChatbotInteraction.query.filter_by(phone_number=test_phone).count()
        print(f"üìä Interacciones hist√≥ricas: {interactions}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando estado inicial: {e}")
        return False

def test_conversation_start(test_phone):
    """Prueba el inicio de una nueva conversaci√≥n"""
    try:
        if not CHATBOT_AVAILABLE:
            print("‚ö†Ô∏è  ChatbotService no disponible - simulando creaci√≥n de contexto")
            
            # Crear contexto manualmente
            context = ConversationContext(
                phone_number=test_phone,
                current_topic="greeting",
                last_interaction=datetime.utcnow(),
                session_count=1
            )
            db.session.add(context)
            db.session.commit()
            
            print(f"‚úÖ Contexto simulado creado:")
            print(f"   ‚Ä¢ Tel√©fono: {context.phone_number}")
            print(f"   ‚Ä¢ √öltima interacci√≥n: {context.last_interaction}")
            print(f"   ‚Ä¢ Sesiones: {context.session_count}")
            return True
        
        chatbot = ChatbotService()
        
        # Enviar primer mensaje
        response = chatbot.process_message(test_phone, "hola")
        
        print(f"üì± Mensaje enviado: 'hola'")
        print(f"ü§ñ Respuesta: {response.get('response', 'Sin respuesta')[:80]}...")
        print(f"‚è±Ô∏è  Tiempo: {response.get('processing_time_ms', 0)}ms")
        print(f"üéØ Tipo: {response.get('type', 'unknown')}")
        
        # Verificar que se cre√≥ contexto
        context = ConversationContext.query.filter_by(phone_number=test_phone).first()
        
        if context:
            print(f"‚úÖ Contexto creado:")
            print(f"   ‚Ä¢ Tel√©fono: {context.phone_number}")
            print(f"   ‚Ä¢ √öltima interacci√≥n: {context.last_interaction}")
            print(f"   ‚Ä¢ Sesiones: {context.session_count}")
            print(f"   ‚Ä¢ Flujo ID: {context.flow_id}")
        else:
            print(f"‚ùå No se cre√≥ contexto de conversaci√≥n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error iniciando conversaci√≥n: {e}")
        import traceback
        print(f"   Traceback: {traceback.format_exc()}")
        return False

def test_active_conversation(test_phone):
    """Prueba una conversaci√≥n activa con m√∫ltiples mensajes"""
    try:
        if not CHATBOT_AVAILABLE:
            print("‚ö†Ô∏è  ChatbotService no disponible - simulando conversaci√≥n activa")
            
            # Simular m√∫ltiples interacciones actualizando el contexto
            context = ConversationContext.query.filter_by(phone_number=test_phone).first()
            if context:
                # Simular 4 interacciones
                for i in range(4):
                    context.last_interaction = datetime.utcnow()
                    context.session_count = context.session_count + 1 if i > 1 else context.session_count
                    db.session.commit()
                    
                    # Simular registro de interacci√≥n
                    interaction = ChatbotInteraction(
                        phone_number=test_phone,
                        message_in=f"mensaje_test_{i+1}",
                        message_out=f"respuesta_test_{i+1}",
                        response_type="simulated",
                        processing_time_ms=100,
                        flow_id=context.flow_id
                    )
                    db.session.add(interaction)
                    db.session.commit()
                
                print(f"‚úÖ Conversaci√≥n simulada con 4 mensajes")
                print(f"   ‚Ä¢ Sesiones totales: {context.session_count}")
                print(f"   ‚Ä¢ √öltima interacci√≥n: {context.last_interaction}")
                
                # Verificar interacciones registradas
                interactions_count = ChatbotInteraction.query.filter_by(phone_number=test_phone).count()
                print(f"   ‚Ä¢ Total interacciones registradas: {interactions_count}")
                
                return True
            else:
                print("‚ùå No hay contexto para simular conversaci√≥n")
                return False
        
        chatbot = ChatbotService()
        
        test_messages = [
            "ayuda",
            "precio",
            "1", 
            "gracias"
        ]
        
        print(f"üí¨ Simulando conversaci√≥n activa con {len(test_messages)} mensajes:")
        
        for i, message in enumerate(test_messages, 1):
            print(f"\n   {i}. Usuario: '{message}'")
            
            response = chatbot.process_message(test_phone, message)
            
            print(f"      Bot: {response.get('response', 'Sin respuesta')[:60]}...")
            print(f"      Tipo: {response.get('type', 'unknown')} | Tiempo: {response.get('processing_time_ms', 0)}ms")
            
            # Verificar actualizaci√≥n de contexto
            context = ConversationContext.query.filter_by(phone_number=test_phone).first()
            if context:
                print(f"      √öltima interacci√≥n: {context.last_interaction}")
        
        # Verificar estado final del contexto
        context = ConversationContext.query.filter_by(phone_number=test_phone).first()
        if context:
            print(f"\n‚úÖ Estado del contexto despu√©s de conversaci√≥n:")
            print(f"   ‚Ä¢ Sesiones totales: {context.session_count}")
            print(f"   ‚Ä¢ Tema actual: {context.current_topic}")
            print(f"   ‚Ä¢ Variables de contexto: {context.context_data}")
        
        # Verificar interacciones registradas
        interactions_count = ChatbotInteraction.query.filter_by(phone_number=test_phone).count()
        print(f"   ‚Ä¢ Total interacciones registradas: {interactions_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en conversaci√≥n activa: {e}")
        return False

def test_conversation_timeout(test_phone):
    """Simula una conversaci√≥n abandonada y verifica controles de timeout"""
    try:
        from config.default import DefaultConfig
        
        timeout_hours = DefaultConfig.CHATBOT_SESSION_TIMEOUT_HOURS
        print(f"‚öôÔ∏è  Timeout configurado: {timeout_hours} horas")
        
        # Obtener contexto actual
        context = ConversationContext.query.filter_by(phone_number=test_phone).first()
        
        if context:
            # Simular abandono modificando last_interaction para que sea antigua
            old_time = datetime.utcnow() - timedelta(hours=timeout_hours + 1)
            original_session_count = context.session_count
            context.last_interaction = old_time
            db.session.commit()
            
            print(f"üïê Simulando abandono - √∫ltima interacci√≥n: {old_time}")
            
            if not CHATBOT_AVAILABLE:
                print("‚ö†Ô∏è  ChatbotService no disponible - simulando verificaci√≥n de timeout")
                
                # Simular l√≥gica de verificaci√≥n de timeout
                time_diff = datetime.utcnow() - context.last_interaction
                is_expired = time_diff.total_seconds() > (timeout_hours * 3600)
                
                print(f"üìä An√°lisis de timeout:")
                print(f"   ‚Ä¢ Tiempo transcurrido: {time_diff}")
                print(f"   ‚Ä¢ Est√° expirado: {is_expired}")
                
                if is_expired:
                    # Simular reinicio de sesi√≥n
                    context.last_interaction = datetime.utcnow()
                    context.session_count = original_session_count + 1
                    context.current_topic = "session_restart"
                    db.session.commit()
                    
                    print(f"üîÑ Sesi√≥n simulada reiniciada:")
                    print(f"   ‚Ä¢ Nueva sesi√≥n: {context.session_count}")
                    print(f"   ‚Ä¢ Nueva √∫ltima interacci√≥n: {context.last_interaction}")
                
                return True
            
            # Intentar nueva interacci√≥n despu√©s del timeout con chatbot real
            chatbot = ChatbotService()
            response = chatbot.process_message(test_phone, "¬øsigues ah√≠?")
            
            print(f"üì± Mensaje despu√©s de timeout: '¬øsigues ah√≠?'")
            print(f"ü§ñ Respuesta: {response.get('response', 'Sin respuesta')[:80]}...")
            
            # Verificar si se reinici√≥ la sesi√≥n
            context_after = ConversationContext.query.filter_by(phone_number=test_phone).first()
            
            if context_after:
                session_restarted = context_after.session_count > original_session_count
                print(f"üîÑ Sesi√≥n reiniciada: {session_restarted}")
                
                if session_restarted:
                    print(f"   ‚Ä¢ Nueva sesi√≥n: {context_after.session_count}")
                    print(f"   ‚Ä¢ Nueva √∫ltima interacci√≥n: {context_after.last_interaction}")
                else:
                    print(f"   ‚Ä¢ Mismo n√∫mero de sesi√≥n: {context_after.session_count}")
            
            return True
        else:
            print(f"‚ùå No hay contexto para simular timeout")
            return False
            
    except Exception as e:
        print(f"‚ùå Error simulando timeout: {e}")
        return False

def test_conversation_cleanup():
    """Prueba el sistema de limpieza de conversaciones antiguas"""
    try:
        # Crear contextos de diferentes fechas para prueba
        test_phones = ["595987000124", "595987000125", "595987000126"]
        
        print(f"üßπ Creando contextos de prueba para limpieza...")
        
        # Crear contextos antiguos
        for i, phone in enumerate(test_phones):
            days_old = [35, 20, 5][i]  # Diferentes antiguedades
            old_date = datetime.utcnow() - timedelta(days=days_old)
            
            context = ConversationContext(
                phone_number=phone,
                current_topic="test_cleanup",
                last_interaction=old_date,
                session_count=1
            )
            
            db.session.add(context)
            print(f"   ‚Ä¢ {phone}: {days_old} d√≠as atr√°s")
        
        db.session.commit()
        
        # Verificar total antes de limpieza
        total_before = ConversationContext.query.count()
        print(f"üìä Total contextos antes de limpieza: {total_before}")
        
        # Ejecutar limpieza (30 d√≠as por defecto)
        if CONV_REPO_AVAILABLE:
            conv_repo = ConversationRepository()
            cleaned_count = conv_repo.clear_old_contexts(days_old=30)
        else:
            # Simular limpieza manual
            cutoff_date = datetime.utcnow() - timedelta(days=30)
            old_contexts = ConversationContext.query.filter(
                ConversationContext.last_interaction < cutoff_date
            ).all()
            
            cleaned_count = len(old_contexts)
            
            for context in old_contexts:
                db.session.delete(context)
            
            db.session.commit()
        
        print(f"üßΩ Contextos limpiados: {cleaned_count}")
        
        # Verificar total despu√©s de limpieza
        total_after = ConversationContext.query.count()
        print(f"üìä Total contextos despu√©s de limpieza: {total_after}")
        
        # Verificar que solo se limpiaron los antiguos
        remaining_test_contexts = ConversationContext.query.filter(
            ConversationContext.phone_number.in_(test_phones)
        ).all()
        
        print(f"üì± Contextos de prueba restantes:")
        for context in remaining_test_contexts:
            days_diff = (datetime.utcnow() - context.last_interaction).days
            print(f"   ‚Ä¢ {context.phone_number}: {days_diff} d√≠as")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en limpieza: {e}")
        return False

def test_conversation_restart(test_phone):
    """Prueba el reinicio de conversaci√≥n despu√©s de limpieza o timeout"""
    try:
        print(f"üîÑ Probando reinicio de conversaci√≥n para {test_phone}")
        
        # Limpiar contexto existente si existe
        existing_context = ConversationContext.query.filter_by(phone_number=test_phone).first()
        if existing_context:
            db.session.delete(existing_context)
            db.session.commit()
            print(f"üóëÔ∏è  Contexto existente eliminado")
        
        if not CHATBOT_AVAILABLE:
            print("‚ö†Ô∏è  ChatbotService no disponible - simulando reinicio")
            
            # Crear nuevo contexto simulado
            new_context = ConversationContext(
                phone_number=test_phone,
                current_topic="restart",
                last_interaction=datetime.utcnow(),
                session_count=1
            )
            db.session.add(new_context)
            db.session.commit()
            
            print(f"‚úÖ Nuevo contexto simulado:")
            print(f"   ‚Ä¢ Sesi√≥n: {new_context.session_count}")
            print(f"   ‚Ä¢ Creado: {new_context.last_interaction}")
            print(f"   ‚Ä¢ Tema: {new_context.current_topic}")
            
            return True
        
        # Iniciar nueva conversaci√≥n con chatbot real
        chatbot = ChatbotService()
        response = chatbot.process_message(test_phone, "Hola de nuevo")
        
        print(f"üì± Nuevo mensaje: 'Hola de nuevo'")
        print(f"ü§ñ Respuesta: {response.get('response', 'Sin respuesta')[:80]}...")
        
        # Verificar nuevo contexto
        new_context = ConversationContext.query.filter_by(phone_number=test_phone).first()
        
        if new_context:
            print(f"‚úÖ Nuevo contexto creado:")
            print(f"   ‚Ä¢ Sesi√≥n: {new_context.session_count}")
            print(f"   ‚Ä¢ Creado: {new_context.last_interaction}")
            print(f"   ‚Ä¢ Flujo ID: {new_context.flow_id}")
        else:
            print(f"‚ùå No se pudo crear nuevo contexto")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error reiniciando conversaci√≥n: {e}")
        return False

def print_lifecycle_analysis():
    """Imprime an√°lisis completo del ciclo de vida de conversaciones"""
    print("üîç AN√ÅLISIS DE CONTROLES DE CICLO DE VIDA:")
    
    # Controles existentes
    print("\n‚úÖ CONTROLES IMPLEMENTADOS:")
    print("   ‚Ä¢ ConversationContext.last_interaction - Timestamp de √∫ltima actividad")
    print("   ‚Ä¢ CHATBOT_SESSION_TIMEOUT_HOURS - Configuraci√≥n de timeout (24h por defecto)")
    print("   ‚Ä¢ ConversationRepository.clear_old_contexts() - Limpieza autom√°tica")
    print("   ‚Ä¢ session_count - Contador de sesiones por usuario")
    
    # Controles faltantes
    print("\n‚ö†Ô∏è  CONTROLES FALTANTES IDENTIFICADOS:")
    print("   ‚Ä¢ ‚ùå Sin verificaci√≥n autom√°tica de timeout en process_message()")
    print("   ‚Ä¢ ‚ùå Sin cierre expl√≠cito de conversaci√≥n cuando usuario dice 'adi√≥s'")
    print("   ‚Ä¢ ‚ùå Sin tarea programada (cron/celery) para limpieza autom√°tica")
    print("   ‚Ä¢ ‚ùå Sin notificaci√≥n o logging cuando conversaci√≥n expira")
    
    # Estado actual
    print("\nüìä ESTADO ACTUAL:")
    try:
        total_contexts = ConversationContext.query.count()
        active_contexts = ConversationContext.query.filter(
            ConversationContext.last_interaction > datetime.utcnow() - timedelta(hours=24)
        ).count()
        
        print(f"   ‚Ä¢ Total contextos en BD: {total_contexts}")
        print(f"   ‚Ä¢ Contextos activos (√∫ltimas 24h): {active_contexts}")
        print(f"   ‚Ä¢ Contextos inactivos: {total_contexts - active_contexts}")
        
    except Exception as e:
        print(f"   ‚Ä¢ Error consultando estado: {e}")
    
    # Recomendaciones
    print("\nüí° RECOMENDACIONES:")
    print("   ‚Ä¢ Implementar verificaci√≥n de timeout en ChatbotService")
    print("   ‚Ä¢ Agregar comando expl√≠cito de cierre ('cerrar conversaci√≥n')")
    print("   ‚Ä¢ Configurar tarea programada para limpieza diaria")
    print("   ‚Ä¢ Implementar logging de eventos de ciclo de vida")
    print("   ‚Ä¢ Considerar diferentes timeouts por tipo de conversaci√≥n")

if __name__ == "__main__":
    test_conversation_lifecycle()
