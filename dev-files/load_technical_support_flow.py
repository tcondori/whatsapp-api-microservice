#!/usr/bin/env python3
"""
Script para cargar el flujo completo de soporte t√©cnico en la base de datos
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from app.repositories.flow_repository import FlowRepository
from database.models import ConversationFlow

def cargar_flujo_soporte_tecnico():
    """Carga el flujo de soporte t√©cnico completo desde el archivo .rive"""
    print("üõ†Ô∏è CARGANDO FLUJO DE SOPORTE T√âCNICO COMPLETO")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        try:
            # 1. Leer el archivo completo
            archivo_flujo = "static/rivescript/technical_support_flow.rive"
            
            if not os.path.exists(archivo_flujo):
                print(f"‚ùå Archivo no encontrado: {archivo_flujo}")
                return False
            
            # Leer con diferentes encodings para evitar problemas
            contenido_flujo = None
            for encoding in ['utf-8', 'utf-8-sig', 'latin-1']:
                try:
                    with open(archivo_flujo, 'r', encoding=encoding) as f:
                        contenido_flujo = f.read()
                    print(f"‚úÖ Archivo le√≠do correctamente con encoding: {encoding}")
                    break
                except UnicodeDecodeError:
                    continue
            
            if not contenido_flujo:
                print("‚ùå No se pudo leer el archivo con ning√∫n encoding")
                return False
            
            print(f"üìÑ Contenido del archivo:")
            print(f"   üìè Tama√±o: {len(contenido_flujo)} caracteres")
            print(f"   üìä L√≠neas: {len(contenido_flujo.splitlines())}")
            
            # 2. Verificar si ya existe el flujo
            flow_repo = FlowRepository()
            flujo_existente = None
            
            # Buscar por nombre similar
            flujos = flow_repo.get_all()  # Obtener todos, no solo activos
            for flujo in flujos:
                if any(palabra in flujo.name.lower() for palabra in ['soporte', 'tecnico', 'technical', 'support']):
                    flujo_existente = flujo
                    break
            
            # 3. Crear o actualizar el flujo
            if flujo_existente:
                print(f"\nüîÑ Actualizando flujo existente: {flujo_existente.name}")
                
                # Actualizar contenido
                result = flow_repo.update(flujo_existente.id,
                    name="Soporte T√©cnico Completo",
                    description="Flujo completo de soporte t√©cnico con troubleshooting detallado y escalaci√≥n",
                    rivescript_content=contenido_flujo,
                    is_active=True,
                    priority=2,  # Alta prioridad para soporte t√©cnico
                    fallback_to_llm=False
                )
                
                if result:
                    print("‚úÖ Flujo actualizado exitosamente")
                else:
                    print("‚ùå Error actualizando flujo")
                    return False
                    
            else:
                print(f"\n‚ûï Creando nuevo flujo de soporte t√©cnico")
                
                # Crear nuevo flujo
                nuevo_flujo = flow_repo.create(
                    name="Soporte T√©cnico Completo",
                    description="Flujo completo de soporte t√©cnico con troubleshooting detallado y escalaci√≥n",
                    rivescript_content=contenido_flujo,
                    is_active=True,
                    is_default=False,
                    priority=2,
                    fallback_to_llm=False,
                    max_context_messages=20,
                    usage_count=0
                )
                
                if nuevo_flujo:
                    print(f"‚úÖ Nuevo flujo creado exitosamente con ID: {nuevo_flujo.id}")
                else:
                    print("‚ùå Error creando flujo")
                    return False
            
            # 4. Verificar carga en RiveScript
            print(f"\nüß™ Verificando carga del flujo...")
            
            from app.services.rivescript_service import RiveScriptService
            
            # Reinicializar RiveScript para que tome los cambios
            rivescript_service = RiveScriptService()
            
            # Forzar reinicializaci√≥n
            rivescript_service._initialized = False
            rivescript_service._rs = None
            
            if rivescript_service._ensure_initialized():
                print("‚úÖ RiveScript reinicializado correctamente")
                
                # Probar triggers espec√≠ficos
                test_phone = "+5959871886"
                test_messages = [
                    "soporte tecnico",
                    "soporte t√©cnico", 
                    "ayuda tecnica",
                    "problema tecnico",
                    "no funciona",
                    "error",
                    "falla"
                ]
                
                print(f"\nüéØ Probando triggers espec√≠ficos:")
                funcionando = False
                
                for msg in test_messages:
                    try:
                        response = rivescript_service.get_response(test_phone, msg)
                        if response and response.get('response'):
                            resp_text = response['response']
                            if "Soporte T√©cnico" in resp_text and "üõ†Ô∏è" in resp_text:
                                print(f"‚úÖ '{msg}' ‚Üí ¬°TRIGGER FUNCIONA!")
                                print(f"   Respuesta completa ({len(resp_text)} chars)")
                                # Verificar que tenga las opciones
                                opciones_encontradas = 0
                                for num in ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"]:
                                    if num in resp_text:
                                        opciones_encontradas += 1
                                print(f"   Opciones del men√∫: {opciones_encontradas}/5")
                                funcionando = True
                            else:
                                print(f"‚ùå '{msg}' ‚Üí Respuesta incorrecta: {resp_text[:50]}...")
                        else:
                            print(f"‚ùå '{msg}' ‚Üí Sin respuesta")
                    except Exception as e:
                        print(f"‚ùå '{msg}' ‚Üí Error: {e}")
                
                if funcionando:
                    print(f"\nüéâ ¬°FLUJO T√âCNICO FUNCIONANDO CORRECTAMENTE!")
                    return True
                else:
                    print(f"\n‚ö†Ô∏è Flujo cargado pero no responde correctamente")
            else:
                print("‚ùå Error reinicializando RiveScript")
            
            return False
            
        except Exception as e:
            print(f"‚ùå Error general: {e}")
            import traceback
            traceback.print_exc()
            return False

def verificar_todos_los_flujos():
    """Verifica qu√© flujos est√°n actualmente en la base de datos"""
    print("\n" + "=" * 60)
    print("üìã VERIFICANDO TODOS LOS FLUJOS EN BASE DE DATOS")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        try:
            flow_repo = FlowRepository()
            flujos = flow_repo.get_active_flows()
            
            print(f"üìä Total de flujos activos: {len(flujos)}")
            
            for i, flujo in enumerate(flujos, 1):
                print(f"\n{i}. üìÑ {flujo.name}")
                print(f"   üÜî ID: {flujo.id}")
                print(f"   üéØ Prioridad: {flujo.priority}")
                print(f"   üìä Uso: {flujo.usage_count}")
                print(f"   üìè Contenido: {len(flujo.rivescript_content)} caracteres")
                
                # Buscar triggers principales
                lineas = flujo.rivescript_content.splitlines()
                triggers = [l.strip() for l in lineas if l.strip().startswith('+ ')]
                print(f"   üéØ Triggers: {len(triggers)}")
                
                # Mostrar algunos triggers importantes
                for trigger in triggers[:3]:
                    if len(trigger) > 80:
                        trigger = trigger[:80] + "..."
                    print(f"      ‚Ä¢ {trigger}")
                if len(triggers) > 3:
                    print(f"      ... y {len(triggers) - 3} m√°s")
                    
        except Exception as e:
            print(f"‚ùå Error verificando flujos: {e}")

def test_flujo_completo():
    """Test completo del flujo t√©cnico con diferentes mensajes"""
    print("\n" + "=" * 60)
    print("üß™ TEST COMPLETO DEL FLUJO DE SOPORTE T√âCNICO")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        try:
            from app.services.rivescript_service import RiveScriptService
            
            rivescript_service = RiveScriptService()
            if not rivescript_service._ensure_initialized():
                print("‚ùå No se pudo inicializar RiveScript para testing")
                return
            
            test_phone = "+5959871886"
            
            # Test del flujo principal
            test_scenarios = [
                {
                    "name": "Activaci√≥n del flujo",
                    "messages": ["soporte tecnico", "soporte t√©cnico", "ayuda tecnica", "problema tecnico", "no funciona"],
                    "expected": "Soporte T√©cnico"
                },
                {
                    "name": "Opciones del men√∫",
                    "messages": ["1", "2", "3", "4", "5"],
                    "expected": ["Conexi√≥n", "Aplicaci√≥n", "Rendimiento", "Configuraci√≥n", "T√©cnico"]
                },
                {
                    "name": "Respuestas de seguimiento",
                    "messages": ["si", "no", "gracias", "menu principal"],
                    "expected": ["funcionado", "intentar", "alegra", "men√∫ principal"]
                }
            ]
            
            for scenario in test_scenarios:
                print(f"\nüé¨ Escenario: {scenario['name']}")
                print(f"-" * 40)
                
                for msg in scenario['messages']:
                    try:
                        response = rivescript_service.get_response(test_phone, msg)
                        if response and response.get('response'):
                            resp_text = response['response']
                            print(f"‚úÖ '{msg}' ‚Üí {len(resp_text)} chars")
                            
                            # Verificar contenido esperado
                            expected = scenario['expected']
                            if isinstance(expected, str):
                                if expected in resp_text:
                                    print(f"   ‚úÖ Contiene: '{expected}'")
                                else:
                                    print(f"   ‚ùå No contiene: '{expected}'")
                            elif isinstance(expected, list):
                                found = [exp for exp in expected if exp in resp_text]
                                print(f"   ‚úÖ Encontrados: {found}")
                                
                        else:
                            print(f"‚ùå '{msg}' ‚Üí Sin respuesta")
                    except Exception as e:
                        print(f"‚ùå '{msg}' ‚Üí Error: {e}")
                        
        except Exception as e:
            print(f"‚ùå Error en testing: {e}")

if __name__ == "__main__":
    print("üí° Recuerda activar el entorno virtual: .\\venv\\Scripts\\activate")
    
    # 1. Cargar flujo t√©cnico
    if cargar_flujo_soporte_tecnico():
        print("\nüéâ ¬°FLUJO DE SOPORTE T√âCNICO CARGADO EXITOSAMENTE!")
        
        # 2. Verificar todos los flujos
        verificar_todos_los_flujos()
        
        # 3. Test completo
        test_flujo_completo()
        
        print(f"\n" + "=" * 60)
        print(f"üí¨ AHORA PUEDES PROBAR EN EL SIMULADOR:")
        print(f"=" * 60)
        print(f"üåê URL: http://localhost:5001/chat")
        print(f"")
        print(f"üí¨ Mensajes de prueba:")
        print(f"   ‚Ä¢ 'soporte tecnico'")
        print(f"   ‚Ä¢ 'ayuda tecnica'") 
        print(f"   ‚Ä¢ 'problema tecnico'")
        print(f"   ‚Ä¢ 'no funciona'")
        print(f"   ‚Ä¢ 'error'")
        print(f"")
        print(f"‚ö° Despu√©s prueba las opciones:")
        print(f"   ‚Ä¢ '1' (problemas de conexi√≥n)")
        print(f"   ‚Ä¢ '2' (errores de aplicaci√≥n)")
        print(f"   ‚Ä¢ '3' (problemas de rendimiento)")
        print(f"   ‚Ä¢ '4' (configuraci√≥n de cuenta)")
        print(f"   ‚Ä¢ '5' (hablar con t√©cnico)")
        
    else:
        print("\n‚ùå Hubo problemas cargando el flujo")
        print("üîß Revisa los errores arriba y vuelve a intentar")
