"""
Demostraci√≥n y utilidades para gesti√≥n de logs organizados por fecha
Muestra las capacidades del nuevo sistema de logging por fechas
"""

import sys
import os
from pathlib import Path
from datetime import datetime, timedelta

# Agregar path del proyecto
sys.path.insert(0, str(Path(__file__).parent))

def demonstrate_dated_logging():
    """
    Demuestra el sistema de logging organizado por fechas
    """
    print("üóìÔ∏è Sistema de Logging Organizado por Fechas")
    print("=" * 50)
    
    try:
        from app.utils.log_config import DateBasedLoggingConfig, initialize_dated_logging
        from app.utils.logger import WhatsAppLogger, EventLogger
        from app.utils.log_date_utils import LogDateManager, LogAnalyzer
        
        print("‚úÖ M√≥dulos importados correctamente")
        
        # 1. Configurar logging con estructura por fechas
        print("\nüîß Configurando logging con estructura por fechas...")
        
        config_result = initialize_dated_logging(environment='development')
        print(f"‚úÖ Configuraci√≥n completada: {config_result['environment']}")
        
        # 2. Generar algunos logs de ejemplo
        print("\nüìù Generando logs de ejemplo...")
        
        api_logger = WhatsAppLogger.get_logger(WhatsAppLogger.API_LOGGER)
        service_logger = WhatsAppLogger.get_logger(WhatsAppLogger.SERVICE_LOGGER)
        security_logger = WhatsAppLogger.get_logger(WhatsAppLogger.SECURITY_LOGGER)
        event_logger = EventLogger()
        
        # Logs estructurados con datos de ejemplo
        api_logger.info(
            "API request procesada exitosamente",
            extra={'extra_data': {
                'endpoint': '/api/messages/send',
                'method': 'POST',
                'user_id': 'user_12345',
                'response_time_ms': 145.2,
                'status_code': 200,
                'message_id': 'msg_demo_001',
                'phone_number_hash': 'hash_abcd1234'
            }}
        )
        
        service_logger.info(
            "Mensaje de WhatsApp procesado",
            extra={'extra_data': {
                'message_type': 'text',
                'template_name': 'welcome_message',
                'delivery_status': 'sent',
                'processing_time_ms': 89.5,
                'queue_size': 15
            }}
        )
        
        security_logger.warning(
            "Rate limiting aplicado",
            extra={'extra_data': {
                'ip_address': '192.168.1.100',
                'endpoint': '/api/messages',
                'rate_limit': 100,
                'current_requests': 105,
                'time_window': '1_hour',
                'action': 'request_rejected'
            }}
        )
        
        # Usar EventLogger para registrar eventos espec√≠ficos
        event_logger.log_whatsapp_request(
            endpoint='/v1/messages',
            method='POST',
            payload={'to': '+52123456789', 'type': 'text', 'text': {'body': 'Mensaje de prueba'}},
            phone_number='+52123456789',
            message_id='msg_demo_002'
        )
        
        event_logger.log_performance_metric(
            metric_name='webhook_processing_time',
            value=234.7,
            unit='ms',
            tags={'webhook_type': 'message_status', 'country': 'MX'}
        )
        
        print("‚úÖ Logs de ejemplo generados")
        
        # 3. Mostrar estructura de directorios creada
        print("\nüìÅ Estructura de directorios creada:")
        
        paths = DateBasedLoggingConfig.get_log_directory_structure()
        
        for path_name, path_obj in paths.items():
            if path_obj.exists():
                files = list(path_obj.glob('*'))
                print(f"  {path_name}: {path_obj}")
                for file in files[:5]:  # Mostrar solo los primeros 5
                    size = file.stat().st_size if file.is_file() else 'DIR'
                    print(f"    ‚îî‚îÄ {file.name} ({size} bytes)")
        
        # 4. Demostrar navegaci√≥n por fechas
        print("\nüîç Navegaci√≥n por fechas:")
        
        date_manager = LogDateManager()
        available_dates = date_manager.get_available_dates()
        
        print(f"Fechas disponibles: {len(available_dates)}")
        for date in available_dates[-5:]:  # √öltimas 5 fechas
            logs = date_manager.get_logs_for_date(date)
            print(f"  üìÖ {date.strftime('%Y-%m-%d')}: {len(logs)} archivos")
        
        # 5. B√∫squeda en logs
        print("\nüîé B√∫squeda en logs:")
        
        # Buscar logs de las √∫ltimas 24 horas
        search_results = list(date_manager.search_logs_by_pattern(
            r'response_time_ms',
            start_date=datetime.now() - timedelta(hours=24),
            end_date=datetime.now()
        ))
        
        print(f"Encontrados {len(search_results)} registros con m√©tricas de tiempo de respuesta:")
        for result in search_results[:3]:  # Mostrar solo los primeros 3
            print(f"  üìÑ {result['file']} (l√≠nea {result['line_number']})")
            print(f"     {result['line'][:100]}...")
        
        # 6. Estad√≠sticas de logs
        print("\nüìä Estad√≠sticas de logs:")
        
        stats = date_manager.get_log_statistics(
            start_date=datetime.now() - timedelta(days=7)
        )
        
        print(f"Per√≠odo: {stats['period']['days']} d√≠as")
        print(f"Total archivos: {stats['files']['total_count']}")
        print(f"Tama√±o total: {stats['files']['total_size_readable']}")
        print(f"Por componente:")
        
        for component, comp_stats in stats['files']['by_component'].items():
            print(f"  ‚Ä¢ {component}: {comp_stats['count']} archivos, {comp_stats['size_readable']}")
        
        print(f"Niveles de log:")
        for level, count in stats['log_levels'].items():
            if count > 0:
                print(f"  ‚Ä¢ {level}: {count}")
        
        # 7. An√°lisis avanzado
        print("\nüî¨ An√°lisis avanzado:")
        
        analyzer = LogAnalyzer()
        
        # Patrones de errores
        error_patterns = analyzer.find_error_patterns(days_back=1)
        total_errors = sum(len(errors) for errors in error_patterns.values())
        print(f"Errores encontrados en las √∫ltimas 24h: {total_errors}")
        
        for category, errors in error_patterns.items():
            if errors:
                print(f"  ‚Ä¢ {category}: {len(errors)} errores")
        
        # Tendencias de performance
        perf_trends = analyzer.analyze_performance_trends(days_back=1)
        print(f"Requests analizados: {perf_trends['total_requests']}")
        
        if perf_trends['daily_trends']:
            today_key = datetime.now().strftime('%Y-%m-%d')
            if today_key in perf_trends['daily_trends']:
                today_stats = perf_trends['daily_trends'][today_key]
                print(f"Performance hoy:")
                print(f"  ‚Ä¢ Tiempo promedio: {today_stats['avg_response_time']:.1f}ms")
                print(f"  ‚Ä¢ Tiempo m√°ximo: {today_stats['max_response_time']:.1f}ms")
                print(f"  ‚Ä¢ Requests: {today_stats['request_count']}")
        
        # 8. Comandos √∫tiles
        print("\nüõ†Ô∏è Comandos √∫tiles disponibles:")
        
        from app.utils.log_date_utils import create_log_viewer_commands
        commands = create_log_viewer_commands()
        
        print("Comandos implementados:")
        for cmd_name in commands.keys():
            print(f"  ‚Ä¢ {cmd_name}()")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demostraci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False


def demonstrate_log_maintenance():
    """
    Demuestra las capacidades de mantenimiento de logs
    """
    print("\nüßπ Sistema de Mantenimiento de Logs")
    print("=" * 50)
    
    try:
        from app.utils.log_config import LogArchiveManager, create_log_maintenance_task
        
        # 1. Gestor de archivos
        print("üì¶ Gestor de archivos:")
        archive_manager = LogArchiveManager()
        
        print(f"Directorio base: {archive_manager.base_log_dir}")
        print(f"Directorio de archivos: {archive_manager.archive_dir}")
        print(f"Directorio comprimido: {archive_manager.compressed_dir}")
        
        # 2. Tarea de mantenimiento
        print("\n‚öôÔ∏è Tarea de mantenimiento:")
        maintenance_task = create_log_maintenance_task()
        
        print("Tarea creada exitosamente")
        print("Esta tarea puede:")
        print("  ‚Ä¢ Comprimir logs de m√°s de 7 d√≠as")
        print("  ‚Ä¢ Limpiar logs comprimidos de m√°s de 1 a√±o")
        print("  ‚Ä¢ Ejecutarse autom√°ticamente en producci√≥n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en mantenimiento: {e}")
        return False


def show_log_structure_benefits():
    """
    Muestra los beneficios de la estructura organizada por fechas
    """
    print("\nüéØ Beneficios de la Estructura por Fechas")
    print("=" * 50)
    
    benefits = [
        {
            'title': 'üìÖ Organizaci√≥n Temporal',
            'description': 'Logs organizados autom√°ticamente por YYYY/MM/DD'
        },
        {
            'title': 'üîç B√∫squeda Eficiente',
            'description': 'B√∫squeda r√°pida por rangos de fechas espec√≠ficos'
        },
        {
            'title': 'üìä An√°lisis Hist√≥rico',
            'description': 'Tendencias y patrones f√°ciles de identificar'
        },
        {
            'title': 'üíæ Gesti√≥n de Espacio',
            'description': 'Compresi√≥n autom√°tica de logs antiguos'
        },
        {
            'title': 'üßπ Limpieza Autom√°tica',
            'description': 'Eliminaci√≥n programada de logs muy antiguos'
        },
        {
            'title': '‚ö° Performance Mejorada',
            'description': 'Archivos m√°s peque√±os = b√∫squedas m√°s r√°pidas'
        },
        {
            'title': 'üîê Auditor√≠a Mejorada',
            'description': 'Rastreabilidad temporal precisa para compliance'
        },
        {
            'title': 'üìà M√©tricas por Per√≠odo',
            'description': 'Estad√≠sticas y reportes organizados temporalmente'
        }
    ]
    
    for benefit in benefits:
        print(f"{benefit['title']}")
        print(f"  {benefit['description']}")
        print()
    
    print("üöÄ Casos de uso comunes:")
    use_cases = [
        "‚Ä¢ Investigar incidentes en fechas espec√≠ficas",
        "‚Ä¢ Generar reportes mensuales/semanales",
        "‚Ä¢ An√°lizar tendencias de performance",
        "‚Ä¢ Auditor√≠as de seguridad por per√≠odo",
        "‚Ä¢ Depurar problemas hist√≥ricos",
        "‚Ä¢ Monitoreo proactivo de patrones"
    ]
    
    for use_case in use_cases:
        print(f"  {use_case}")


def create_sample_log_queries():
    """
    Crea ejemplos de queries √∫tiles para logs por fecha
    """
    print("\nüí° Queries de Ejemplo")
    print("=" * 50)
    
    queries = [
        {
            'name': 'Errores de hoy',
            'code': '''
date_manager = LogDateManager()
errors = list(date_manager.search_logs_by_pattern(
    r'ERROR',
    start_date=datetime.now().replace(hour=0, minute=0, second=0),
    end_date=datetime.now()
))
print(f"Errores encontrados hoy: {len(errors)}")
            '''
        },
        {
            'name': 'Performance de la √∫ltima semana',
            'code': '''
analyzer = LogAnalyzer()
trends = analyzer.analyze_performance_trends(days_back=7)
print(f"Requests analizados: {trends['total_requests']}")
            '''
        },
        {
            'name': 'Logs de un componente espec√≠fico',
            'code': '''
date_manager = LogDateManager()
api_logs = date_manager.get_logs_for_date(datetime.now(), 'api')
print(f"Logs de API hoy: {len(api_logs)}")
            '''
        },
        {
            'name': 'Estad√≠sticas mensuales',
            'code': '''
start_date = datetime.now().replace(day=1)
stats = date_manager.get_log_statistics(start_date=start_date)
print(f"Archivos este mes: {stats['files']['total_count']}")
            '''
        }
    ]
    
    for i, query in enumerate(queries, 1):
        print(f"{i}. {query['name']}:")
        print(query['code'])
        print()


def main():
    """
    Funci√≥n principal de demostraci√≥n
    """
    print("üóìÔ∏è DEMOSTRACI√ìN: Sistema de Logging por Fechas")
    print("=" * 60)
    
    results = []
    
    # Ejecutar demostraciones
    tests = [
        ("Logging por Fechas", demonstrate_dated_logging),
        ("Mantenimiento de Logs", demonstrate_log_maintenance)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error en {test_name}: {e}")
            results.append((test_name, False))
    
    # Mostrar informaci√≥n adicional
    show_log_structure_benefits()
    create_sample_log_queries()
    
    # Resumen final
    print("\n" + "="*60)
    print("üìä RESUMEN DE DEMOSTRACI√ìN")
    print("="*60)
    
    passed = failed = 0
    for test_name, result in results:
        status = "‚úÖ EXITOSA" if result else "‚ùå FALLIDA"
        print(f"{test_name:.<40} {status}")
        
        if result:
            passed += 1
        else:
            failed += 1
    
    if failed == 0:
        print("\nüéâ ¬°SISTEMA DE LOGGING POR FECHAS COMPLETAMENTE FUNCIONAL!")
        print("\nüìÅ Estructura de logs creada:")
        print("  logs/")
        print("  ‚îú‚îÄ‚îÄ current/           # Enlaces a logs actuales")  
        print("  ‚îú‚îÄ‚îÄ 2025/")
        print("  ‚îÇ   ‚îî‚îÄ‚îÄ 08/")
        print("  ‚îÇ       ‚îî‚îÄ‚îÄ 26/        # logs del d√≠a")
        print("  ‚îÇ           ‚îú‚îÄ‚îÄ api_2025-08-26.log")
        print("  ‚îÇ           ‚îú‚îÄ‚îÄ services_2025-08-26.log")
        print("  ‚îÇ           ‚îî‚îÄ‚îÄ security_2025-08-26.log")
        print("  ‚îú‚îÄ‚îÄ archive/           # Logs archivados")
        print("  ‚îî‚îÄ‚îÄ compressed/        # Logs comprimidos")
        
        print("\nüõ†Ô∏è Capacidades implementadas:")
        print("  ‚úÖ Organizaci√≥n autom√°tica por fecha")
        print("  ‚úÖ B√∫squeda por rangos temporales")
        print("  ‚úÖ An√°lisis de patrones y tendencias")
        print("  ‚úÖ Estad√≠sticas por per√≠odo")
        print("  ‚úÖ Compresi√≥n autom√°tica")
        print("  ‚úÖ Limpieza programada")
        print("  ‚úÖ Enlaces simb√≥licos para acceso r√°pido")
        
        print(f"\nüí° ¬°La mejora solicitada est√° completamente implementada!")
        print("   El sistema ahora organiza los logs por fecha de forma autom√°tica")
        
    else:
        print(f"\n‚ö†Ô∏è {failed} componente(s) tuvieron problemas")
    
    print(f"\n{'='*60}")
    return failed == 0


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
