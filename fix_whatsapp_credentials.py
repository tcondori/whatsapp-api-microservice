"""
Diagn√≥stico espec√≠fico para error de env√≠o real WhatsApp
Identifica si las credenciales son de test o producci√≥n
"""
import sys
import os
import json

# Agregar directorio ra√≠z al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from entrypoint import create_app

def diagnose_whatsapp_error():
    """
    Diagnostica el error espec√≠fico de WhatsApp
    """
    print("=" * 60)
    print("üö® DIAGN√ìSTICO: ERROR 400 WHATSAPP API")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        print("\nüìã TU ERROR ACTUAL:")
        print('‚ùå "400 Client Error: Bad Request for url: https://graph.facebook.com/v18.0/test_phone_id_123/messages"')
        
        print("\nüîç AN√ÅLISIS DEL ERROR:")
        print("‚Ä¢ La URL contiene 'test_phone_id_123'")
        print("‚Ä¢ Esto indica que est√°s usando CREDENCIALES DE TEST")
        print("‚Ä¢ Las credenciales de test NO pueden enviar mensajes reales")
        
        print("\nüìä VERIFICANDO CONFIGURACI√ìN ACTUAL:")
        
        try:
            from database.connection import db
            from database.models import MessagingLine
            
            lines = MessagingLine.query.all()
            
            if not lines:
                print("   ‚ùå No hay l√≠neas configuradas")
            else:
                for line in lines:
                    print(f"\n   üì± L√≠nea {line.line_id}:")
                    print(f"      ‚Ä¢ Phone Number ID: {line.phone_number_id}")
                    
                    if 'test' in line.phone_number_id.lower():
                        print("      üö® ¬°ESTA ES UNA CREDENCIAL DE TEST!")
                        print("      ‚ùå No puede enviar mensajes reales")
                    else:
                        print("      ‚úÖ Parece ser una credencial real")
                    
                    print(f"      ‚Ä¢ N√∫mero: {line.phone_number}")
                    print(f"      ‚Ä¢ Activa: {line.is_active}")
                    
        except Exception as e:
            print(f"   ‚ùå Error consultando base de datos: {e}")
        
        print("\nüìã VARIABLES DE ENTORNO:")
        
        # Verificar variables cr√≠ticas
        token = os.getenv('WHATSAPP_ACCESS_TOKEN', 'NO_CONFIGURADA')
        phone_id = os.getenv('LINE_1_PHONE_NUMBER_ID', 'NO_CONFIGURADA')
        
        print(f"   ‚Ä¢ WHATSAPP_ACCESS_TOKEN: {'‚úÖ Configurada' if token != 'NO_CONFIGURADA' else '‚ùå No configurada'}")
        if 'test' in token.lower():
            print("     üö® ¬°TOKEN DE TEST! No sirve para env√≠o real")
        
        print(f"   ‚Ä¢ LINE_1_PHONE_NUMBER_ID: {'‚úÖ Configurada' if phone_id != 'NO_CONFIGURADA' else '‚ùå No configurada'}")
        if 'test' in phone_id.lower():
            print("     üö® ¬°PHONE ID DE TEST! No sirve para env√≠o real")

def show_solution():
    """
    Muestra la soluci√≥n paso a paso
    """
    print("\n" + "=" * 60)
    print("üîß SOLUCI√ìN PASO A PASO")
    print("=" * 60)
    
    print("""
üéØ PROBLEMA IDENTIFICADO:
   Est√°s usando credenciales de TEST que no pueden enviar mensajes reales.

üöÄ SOLUCI√ìN:

1Ô∏è‚É£ OBTENER CREDENCIALES REALES:
   ‚Ä¢ Ve a: https://developers.facebook.com/apps
   ‚Ä¢ Selecciona tu app de WhatsApp Business
   ‚Ä¢ En "WhatsApp" > "API Setup":
     - Copia el Access Token REAL
     - Copia el Phone Number ID REAL 
     - Copia tu Business Account ID

2Ô∏è‚É£ CONFIGURAR VARIABLES DE ENTORNO:
   Crear archivo .env o configurar en el sistema:
   
   WHATSAPP_ACCESS_TOKEN=EAAxxxxxxxxx (tu token real)
   LINE_1_PHONE_NUMBER_ID=1234567890 (tu phone ID real)
   LINE_1_PHONE_NUMBER=+5491234567890 (tu n√∫mero real)
   WHATSAPP_BUSINESS_ID=1234567890 (tu business ID)

3Ô∏è‚É£ ACTUALIZAR BASE DE DATOS:
   Ejecutar script de actualizaci√≥n que voy a crear...

4Ô∏è‚É£ VERIFICAR:
   Probar nuevamente el env√≠o

‚ö†Ô∏è IMPORTANTE:
‚Ä¢ Tu cuenta de WhatsApp Business debe estar VERIFICADA
‚Ä¢ El n√∫mero debe estar registrado en Meta Business
‚Ä¢ Debes tener permisos de env√≠o de mensajes
""")

def create_update_script():
    """
    Crea script para actualizar a credenciales reales
    """
    script = """'''
Script para actualizar credenciales de PRODUCCI√ìN
EJECUTAR SOLO DESPU√âS de configurar variables de entorno reales
'''
import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from entrypoint import create_app

def update_to_production():
    print("üîÑ ACTUALIZANDO A CREDENCIALES DE PRODUCCI√ìN")
    print("=" * 50)
    
    # Verificar variables reales
    token = os.getenv('WHATSAPP_ACCESS_TOKEN')
    phone_id = os.getenv('LINE_1_PHONE_NUMBER_ID') 
    phone_number = os.getenv('LINE_1_PHONE_NUMBER')
    
    if not all([token, phone_id, phone_number]):
        print("‚ùå Error: Variables de entorno faltantes:")
        print("   - WHATSAPP_ACCESS_TOKEN")
        print("   - LINE_1_PHONE_NUMBER_ID") 
        print("   - LINE_1_PHONE_NUMBER")
        return False
    
    if any('test' in str(v).lower() for v in [token, phone_id]):
        print("‚ùå Error: A√∫n tienes valores de TEST en las variables")
        print("   Configura valores REALES de producci√≥n")
        return False
    
    app = create_app()
    with app.app_context():
        try:
            from database.connection import db
            from database.models import MessagingLine
            
            # Actualizar l√≠nea principal
            line = MessagingLine.query.filter_by(line_id='1').first()
            if not line:
                line = MessagingLine(line_id='1')
                db.session.add(line)
            
            # Configurar valores de producci√≥n
            line.phone_number_id = phone_id
            line.phone_number = phone_number
            line.display_name = os.getenv('LINE_1_DISPLAY_NAME', 'L√≠nea Principal')
            line.is_active = True
            line.current_daily_count = 0
            line.max_daily_messages = int(os.getenv('LINE_1_MAX_DAILY_MESSAGES', '1000'))
            
            db.session.commit()
            
            print("‚úÖ ¬°ACTUALIZACI√ìN EXITOSA!")
            print(f"   ‚Ä¢ Phone Number ID: {line.phone_number_id}")
            print(f"   ‚Ä¢ N√∫mero: {line.phone_number}")
            print(f"   ‚Ä¢ Display Name: {line.display_name}")
            print("")
            print("üéâ ¬°Ya puedes enviar mensajes REALES!")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False

if __name__ == "__main__":
    update_to_production()
"""
    
    with open('fix_production_credentials.py', 'w', encoding='utf-8') as f:
        f.write(script)
    
    print("\nüìù Script creado: fix_production_credentials.py")
    print("   Ejecuta este script DESPU√âS de configurar variables reales")

if __name__ == "__main__":
    try:
        # Diagnosticar el problema
        diagnose_whatsapp_error()
        
        # Mostrar soluci√≥n
        show_solution()
        
        # Crear script de soluci√≥n  
        create_update_script()
        
        print("\n" + "=" * 60)
        print("üìã SIGUIENTE PASO:")
        print("1. Configura variables de entorno REALES")
        print("2. Ejecuta: python fix_production_credentials.py")
        print("3. Prueba el env√≠o nuevamente")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print("\nüèÅ Diagn√≥stico completado")
