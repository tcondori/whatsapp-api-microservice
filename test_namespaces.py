"""
Script de prueba para verificar las importaciones de los namespaces
"""
import os
from dotenv import load_dotenv
load_dotenv()

print("üîç Probando importaciones de namespaces...")

try:
    from app.api.messages.routes import messages_ns
    print(f"‚úÖ messages_ns importado: {messages_ns.name}")
    print(f"   Routes: {len(list(messages_ns.resources))}")
except Exception as e:
    print(f"‚ùå Error importando messages_ns: {e}")
    import traceback
    traceback.print_exc()

try:
    from app.api.contacts.routes import contacts_ns
    print(f"‚úÖ contacts_ns importado: {contacts_ns.name}")
    print(f"   Routes: {len(list(contacts_ns.resources))}")
except Exception as e:
    print(f"‚ùå Error importando contacts_ns: {e}")

try:
    from app.api.media.routes import media_ns
    print(f"‚úÖ media_ns importado: {media_ns.name}")
    print(f"   Routes: {len(list(media_ns.resources))}")
except Exception as e:
    print(f"‚ùå Error importando media_ns: {e}")

try:
    from app.api.webhooks.routes import webhook_ns
    print(f"‚úÖ webhook_ns importado: {webhook_ns.name}")
    print(f"   Routes: {len(list(webhook_ns.resources))}")
except Exception as e:
    print(f"‚ùå Error importando webhook_ns: {e}")
    import traceback
    traceback.print_exc()

print("\nüîß Probando creaci√≥n de API con namespaces...")

try:
    from flask import Flask
    from flask_restx import Api
    
    app = Flask(__name__)
    api = Api(app, title='Test API', version='1.0')
    
    # Registrar namespaces
    from app.api.messages.routes import messages_ns
    from app.api.contacts.routes import contacts_ns
    from app.api.media.routes import media_ns
    from app.api.webhooks.routes import webhook_ns
    
    api.add_namespace(messages_ns, path='/v1/messages')
    api.add_namespace(contacts_ns, path='/v1/contacts')
    api.add_namespace(media_ns, path='/v1/media')
    api.add_namespace(webhook_ns, path='/v1/webhooks')
    
    print(f"‚úÖ API creada con {len(list(app.url_map.iter_rules()))} rutas")
    
    # Mostrar todas las rutas
    print("\nüìã Rutas registradas:")
    for rule in app.url_map.iter_rules():
        methods = ', '.join([m for m in rule.methods if m not in ['HEAD', 'OPTIONS']])
        print(f"  ‚Ä¢ {methods:12} {rule.rule}")
    
except Exception as e:
    print(f"‚ùå Error creando API: {e}")
    import traceback
    traceback.print_exc()
